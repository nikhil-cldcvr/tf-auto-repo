pipeline {
    agent {
        label 'win'
    }

    parameters {
        string(name: 'INPUTS', defaultValue: 'jenkins-project:main,first_prj:main', description: 'Comma-separated list of project inputs in the format PROJECT_KEYS:BRANCH')
    }

    environment {
        SONAR_URL = "http://34.93.167.83:9000" // Change to your SonarQube URL
        API_TOKEN = "squ_9aa34b2df5bb53ea7a6775655f430bf3c0810bb1" // Replace with your API token
    }

    stages {
        stage('Fetch SonarQube Metrics') {
            steps {
                script {
                    def projectInputs = params.INPUTS.split(',')
                    
                    def csvReport = new StringBuilder()
                    csvReport.append("Overall Code Report,\n")
                    csvReport.append(",Categories,,Code Smells,,,,Vulnerabilities,,,,Bugs,,,,\n")
                    csvReport.append(",Project Name,Branch,Major,Critical,Minor,Blocker,Major,Critical,Minor,Blocker,Major,Critical,Minor,Blocker,Lines of Code,Violations,Blocker Violations,Number of Files,Complexity,Number of Classes,\n")

                    def metricQuery = "ncloc,violations,blocker_violations,files,complexity,classes"
                    def issueTypes = ['major', 'critical', 'minor', 'blocker']
                    def issueCategories = ['CODE_SMELL', 'VULNERABILITY', 'BUG']

                    projectInputs.each { input ->
                        def parts = input.split(':')
                        def projectKey = parts[0].trim()

                        // Fetch various metrics
                        bat(script: """
                            curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/measures/component?component=${projectKey}&metricKeys=${metricQuery}" -o sonar_metrics_${projectKey}.json
                        """)
                        def metricsJson = readJSON file: "sonar_metrics_${projectKey}.json"

                        def metricsMap = [:] // Plain map
                        metricsJson.component.measures.each { measure ->
                            metricsMap[measure.metric] = measure.value
                        }

                        def issueCounts = [:] // Plain map
                        issueCategories.each { category ->
                            issueTypes.each { severity ->
                                def key = "${category}_${severity}"
                                issueCounts[key] = 0
                                bat(script: """
                                    curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/issues/search?componentKeys=${projectKey}&types=${category}&severities=${severity.toUpperCase()}&statuses=OPEN" -o issues_${projectKey}_${category}_${severity}.json
                                """)
                                def issuesJson = readJSON file: "issues_${projectKey}_${category}_${severity}.json"
                                issueCounts[key] = issuesJson.total ?: 0
                            }
                        }

                        // Append overall data to the CSV report
                        csvReport.append(",${projectKey},master,")
                        csvReport.append("${issueCounts['CODE_SMELL_major']},${issueCounts['CODE_SMELL_critical']},${issueCounts['CODE_SMELL_minor']},${issueCounts['CODE_SMELL_blocker']},")
                        csvReport.append("${issueCounts['VULNERABILITY_major']},${issueCounts['VULNERABILITY_critical']},${issueCounts['VULNERABILITY_minor']},${issueCounts['VULNERABILITY_blocker']},")
                        csvReport.append("${issueCounts['BUG_major']},${issueCounts['BUG_critical']},${issueCounts['BUG_minor']},${issueCounts['BUG_blocker']},")
                        csvReport.append("${metricsMap['ncloc'] ?: '0'},${metricsMap['violations'] ?: '0'},${metricsMap['blocker_violations'] ?: '0'},${metricsMap['files'] ?: '0'},${metricsMap['complexity'] ?: '0'},${metricsMap['classes'] ?: '0'},\n")
                    }

                    // Write CSV report to a file
                    writeFile file: 'SonarQube_Metrics_Report.csv', text: csvReport.toString()
                    archiveArtifacts artifacts: 'SonarQube_Metrics_Report.csv'
                }
            }
        }
    }
}
