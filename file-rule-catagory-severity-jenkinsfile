pipeline {
    agent {
        label 'win'  // Adjust to your Jenkins agent label
    }

    parameters {
        string(name: 'INPUTS', defaultValue: 'jenkins-project:main:2000-01-01,first_prj:main', description: 'Comma-separated list of project inputs in the format PROJECT_KEYS:BRANCH:DATE (DATE is optional)')
    }

    environment {
        SONAR_URL = "http://34.93.144.137:9000" // Update to your SonarQube URL
        API_TOKEN = "squ_9aa34b2df5bb53ea7a6775655f430bf3c0810bb1" // Replace with your actual API token
    }

    stages {
        stage('Fetch SonarQube Metrics') {
            steps {
                script {
                    def csvReport = new StringBuilder()
                    csvReport.append("From,project,branch,Categories,severity,filename,rulename\n")

                    def projectInputs = params.INPUTS.split(',')

                    projectInputs.each { input ->
                        def parts = input.split(':')
                        def projectKey = parts[0].trim()
                        def branch = parts[1].trim()
                        def date = parts.size() > 2 ? parts[2].trim() : null            

                        def page = 1
                        def totalIssues = 0
                        def isLastPage = false

                        def issuesUrl = "${env.SONAR_URL}/api/issues/search?componentKeys=${projectKey}&branch=${branch}&statuses=OPEN&ps=500&p=${page}"

                        if (date) {
                            issuesUrl += "&createdAfter=${date}"
                        }
                        while (!isLastPage) {
                            bat(script: """
                                curl -s -u ${env.API_TOKEN}: "${issuesUrl}" -o issues_${projectKey}_${page}.json
                            """)

                            // Use readJSON to parse the JSON data
                            def issuesJson = readJSON file: "issues_${projectKey}_${page}.json"

                            totalIssues += issuesJson.issues.size()
                            isLastPage = totalIssues >= 10000 || issuesJson.paging.total <= totalIssues
                            page++

                            issuesJson.issues.each { issue ->
                                def component = issue.component
                                def category = issue.type
                                def severity = issue.severity.toLowerCase()
                                def ruleKey = issue.rule
                                def sanitizedRuleKey = ruleKey.replace(':', '_')
                                def ruleJsonFile = "rule_${sanitizedRuleKey}.json"

                                // Fetch rule name from SonarQube API within the same step
                                bat(script: """
                                    curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/rules/show?key=${ruleKey}" -o ${ruleJsonFile}
                                """)

                                def ruleJson = readJSON file: ruleJsonFile
                                def ruleName = ruleJson.rule?.name?.replaceAll(',', ' ') ?: "Unknown Rule"

                                csvReport.append("${date ?: 'N/A'},${projectKey},${branch},${category},${severity},${component},${ruleKey} - ${ruleName}\n")
                            }
                        }
                    }

                    // Write CSV report to a file
                    writeFile file: 'SonarQube_Metrics_Report.csv', text: csvReport.toString()
                    archiveArtifacts artifacts: 'SonarQube_Metrics_Report.csv'
                }
            }
        }
    }
}
