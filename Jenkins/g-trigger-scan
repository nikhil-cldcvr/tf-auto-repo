pipeline {
    agent any
    tools {
        maven 'Maven' // Name of your Maven tool configured in Jenkins
        jdk 'JDK11'  // Optional: Replace with the name of your configured JDK
    }
    environment {
        SONAR_SCANNER_OPTS = '-Xmx1024m' // Adjust memory limits as necessary
    }
    stages {
        stage('Checkout Code') {
            steps {
                // Checkout code from the version control system (e.g., Git)
                git branch: 'main', url: 'https://github.com/your-repo.git', credentialsId: 'your-credentials-id'
            }
        }
        stage('Build') {
            steps {
                // Build the project using a bat script block
                bat(script: """
                    echo Starting Maven Build...
                    mvn clean install
                """)
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') { // 'SonarQube' is the name configured in Jenkins
                    // Run SonarQube scan using a bat script block
                    bat(script: """
                        mvn sonar:sonar ^
                        -Dsonar.projectKey=your_project_key ^
                        -Dsonar.host.url=http://your-sonarqube-server.com ^
                        -Dsonar.login=your_generated_token
                    """)

                }
            }
        }
    }
    post {
        always {
            // Optional: Archive build artifacts
            archiveArtifacts artifacts: '**\\target\\*.jar', allowEmptyArchive: true
        }
        failure {
            // Handle failure, e.g., send notifications
            echo 'Build failed!'
        }
    }
}
