pipeline {
    agent {
        label 'win'
    }

    parameters {
        string(name: 'INPUTS', defaultValue: 'first_prj:main:sonar', description: 'Comma-separated list of project inputs in the format PROJECT_KEYS:BRANCH:JENKINS_JOB_PATH')
        string(name: 'JENKINS_URL', defaultValue: 'http://34.93.109.240:8080', description: 'Jenkins server URL')
        string(name: 'CREDENTIALS_ID', defaultValue: 'nikhil', description: 'Jenkins credentials ID')
    }

    environment {
        SONAR_URL = "http://34.100.167.242:9000" // Change to your SonarQube URL
        API_TOKEN = "squ_6d1c8e1bc790e15e361209548d6d0de0ad2ca8a5"  // Replace with your API token
        CREDENTIALS_PASSWORD = "11ac03c7511f18fe582113677047edacb4" // Set the credentials password
    }

    stages {
        stage('Fetch SonarQube Metrics') {
            steps {
                script {
                    def projectInputs = params.INPUTS.split(',')
                    
                    def csvReport = new StringBuilder()
                    csvReport.append("Overall Code Report,\n")
                    csvReport.append(",Categories,,Code Smells,,,,Vulnerabilities,,,,Bugs,,,,\n")
                    csvReport.append(",Project Name,Branch,Major,Critical,Minor,Blocker,Major,Critical,Minor,Blocker,Major,Critical,Minor,Blocker,Lines of Code,Violations,Blocker Violations,Number of Files,Complexity,Quality Gate Status,Number of Classes,\n")

                    def metricQuery = "ncloc,violations,blocker_violations,files,complexity,classes"
                    def issueTypes = ['major', 'critical', 'minor', 'blocker']
                    def issueCategories = ['CODE_SMELL', 'VULNERABILITY', 'BUG']

                    projectInputs.each { input ->
                        def parts = input.split(':')
                        def projectKey = parts[0].trim()
                        def branch = parts[1].trim()
                        def jobPath = parts[2].trim()

                        // Fetch project quality gate status
                        bat(script: """
                            curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/qualitygates/project_status?projectKey=${projectKey}" -o quality_gate_status_${projectKey}.json
                        """)

                        // Fetch various metrics
                        bat(script: """
                            curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/measures/component?component=${projectKey}&metricKeys=${metricQuery}" -o sonar_metrics_${projectKey}.json
                        """)

                        // Read and parse the JSON files
                        def qualityGateJson = readJSON file: "quality_gate_status_${projectKey}.json"
                        def metricsJson = readJSON file: "sonar_metrics_${projectKey}.json"

                        def qualityGate = qualityGateJson.projectStatus.status
                        def metricsMap = [:] // Plain map
                        metricsJson.component.measures.each { measure ->
                            metricsMap[measure.metric] = measure.value
                        }

                        def issueCounts = [:] // Plain map
                        issueCategories.each { category ->
                            issueTypes.each { severity ->
                                def key = "${category}_${severity}"
                                issueCounts[key] = 0
                                bat(script: """
                                    curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/issues/search?componentKeys=${projectKey}&types=${category}&severities=${severity.toUpperCase()}&statuses=OPEN" -o issues_${projectKey}_${category}_${severity}.json
                                """)
                                def issuesJson = readJSON file: "issues_${projectKey}_${category}_${severity}.json"
                                issueCounts[key] = issuesJson.total ?: 0
                            }
                        }

                        // Append overall data to the CSV report
                        csvReport.append(",${projectKey},${branch},")
                        csvReport.append("${issueCounts['CODE_SMELL_major']},${issueCounts['CODE_SMELL_critical']},${issueCounts['CODE_SMELL_minor']},${issueCounts['CODE_SMELL_blocker']},")
                        csvReport.append("${issueCounts['VULNERABILITY_major']},${issueCounts['VULNERABILITY_critical']},${issueCounts['VULNERABILITY_minor']},${issueCounts['VULNERABILITY_blocker']},")
                        csvReport.append("${issueCounts['BUG_major']},${issueCounts['BUG_critical']},${issueCounts['BUG_minor']},${issueCounts['BUG_blocker']},")
                        csvReport.append("${metricsMap['ncloc'] ?: '0'},${metricsMap['violations'] ?: '0'},${metricsMap['blocker_violations'] ?: '0'},${metricsMap['files'] ?: '0'},${metricsMap['complexity'] ?: '0'},${qualityGate ?: 'N/A'},${metricsMap['classes'] ?: '0'},\n")
                    }

                    // Append new code report header
                    csvReport.append("\nNew Code Report Since\n")

                    projectInputs.each { input ->
                        def parts = input.split(':')
                        def projectKey = parts[0].trim()
                        def branch = parts[1].trim()
                        def jobPath = parts[2].trim()

                        // Fetch last successful build timestamp inside the new metrics loop
                        def url = "${params.JENKINS_URL}/job/${jobPath}/lastSuccessfulBuild/api/json?tree=timestamp"
                        def response = bat(script: """
                            curl -u "${params.CREDENTIALS_ID}:${env.CREDENTIALS_PASSWORD}" -s "${url}"
                        """, returnStdout: true).trim()
                        response = response.replaceFirst(/^[^\{]*/, '').trim()
                        def json = readJSON text: response
                        def timestamp = json.timestamp

                        def date = new Date(timestamp)
                        def formattedDate = date.format('yyyy-MM-dd')

                        // Fetch new code metrics since the last analysis
                        bat(script: """
                            curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/measures/component?component=${projectKey}&metricKeys=${metricQuery}&since=${formattedDate}" -o sonar_metrics_${projectKey}_new.json
                        """)
                        def metricsJsonNew = readJSON file: "sonar_metrics_${projectKey}_new.json"

                        def qualityGateJsonNew = readJSON file: "quality_gate_status_${projectKey}.json"
                        def qualityGateNew = qualityGateJsonNew.projectStatus.status

                        def metricsMapNew = [:] // Plain map
                        metricsJsonNew.component.measures.each { measure ->
                            metricsMapNew[measure.metric] = measure.value
                        }

                        def issueCountsNew = [:] // Plain map
                        issueCategories.each { category ->
                            issueTypes.each { severity ->
                                def key = "${category}_${severity}"
                                issueCountsNew[key] = 0
                                bat(script: """
                                    curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/issues/search?componentKeys=${projectKey}&types=${category}&severities=${severity.toUpperCase()}&statuses=OPEN&createdAfter=${formattedDate}" -o issues_${projectKey}_${category}_${severity}_new.json
                                """)
                                def issuesJsonNew = readJSON file: "issues_${projectKey}_${category}_${severity}_new.json"
                                issueCountsNew[key] = issuesJsonNew.total ?: 0
                            }
                        }

                        // Append new code metrics data to the CSV report
                        csvReport.append("${formattedDate},${projectKey},${branch},")
                        csvReport.append("${issueCountsNew['CODE_SMELL_major']},${issueCountsNew['CODE_SMELL_critical']},${issueCountsNew['CODE_SMELL_minor']},${issueCountsNew['CODE_SMELL_blocker']},")
                        csvReport.append("${issueCountsNew['VULNERABILITY_major']},${issueCountsNew['VULNERABILITY_critical']},${issueCountsNew['VULNERABILITY_minor']},${issueCountsNew['VULNERABILITY_blocker']},")
                        csvReport.append("${issueCountsNew['BUG_major']},${issueCountsNew['BUG_critical']},${issueCountsNew['BUG_minor']},${issueCountsNew['BUG_blocker']},")
                        csvReport.append("${metricsMapNew['ncloc'] ?: '0'},${metricsMapNew['violations'] ?: '0'},${metricsMapNew['blocker_violations'] ?: '0'},${metricsMapNew['files'] ?: '0'},${metricsMapNew['complexity'] ?: '0'},${qualityGateNew ?: 'N/A'},${metricsMapNew['classes'] ?: '0'}\n")
                    }

                    // Write CSV report to a file
                    writeFile file: 'SonarQube_Metrics_Report.csv', text: csvReport.toString()
                    archiveArtifacts artifacts: 'SonarQube_Metrics_Report.csv'
                }
            }
        }
    }
    
    post {
        always {
            echo 'Cleaning up...'
            deleteDir()
        }
    }
}
