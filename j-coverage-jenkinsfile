pipeline {
    agent {
        label 'win'  // Adjust to your Jenkins agent label
    }

    parameters {
        string(name: 'PROJECTS', defaultValue: 'project1,project2', description: 'Comma-separated list of SonarQube project names')
    }

    environment {
        SONAR_URL = "http://34.100.152.207:9000"  // Update to your SonarQube URL
        API_TOKEN = credentials('SONARQUBE_API_TOKEN')  // Use a secure Jenkins credential
    }

    stages {
        stage('Fetch Coverage Report') {
            steps {
                script {
                    def projects = params.PROJECTS.split(',').collect { it.trim() }
                    def csvReport = new StringBuilder()

                    // Add CSV Header
                    csvReport.append("Project Name,DIR,Coverage(%)\n")

                    projects.each { project ->
                        csvReport.append("${project},,\n") // Project name row

                        def coverageUrl = "${env.SONAR_URL}/api/measures/component_tree?component=${project}&metricKeys=coverage&qualifiers=DIR&strategy=children"

                        bat(script: """
                            curl -s -u "${env.API_TOKEN}:" "${coverageUrl}" -o coverage_${project}.json
                        """)

                        if (fileExists("coverage_${project}.json") && readFile("coverage_${project}.json").trim()) {
                            def jsonResponse = readJSON file: "coverage_${project}.json"

                            // Since there is no "component", directly access "components"
                            if (jsonResponse?.components) {
                                jsonResponse.components.each { dir ->
                                    def dirName = dir.path ?: dir.name
                                    def coverage = dir.measures.find { it.metric == 'coverage' }?.value ?: 'N/A'
                                    csvReport.append(",${dirName},${coverage}%\n")
                                }
                            } else {
                                echo "No coverage data found for ${project}"
                            }
                        } else {
                            error "Failed to fetch coverage data for project ${project}"
                        }
                    }

                    writeFile file: 'SonarQube_Coverage_Report.csv', text: csvReport.toString()
                    archiveArtifacts artifacts: 'SonarQube_Coverage_Report.csv'
                }
            }
        }
    }
}
