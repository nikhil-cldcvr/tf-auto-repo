pipeline {
    agent {
        label 'win'  // Adjust to your Jenkins agent label
    }

    parameters {
        string(name: 'PROJECTS', defaultValue: 'project1,project2', description: 'Comma-separated list of SonarQube project names')
    }

    environment {
        SONAR_URL = "http://34.100.152.207:9000"  // Update to your SonarQube URL
        API_TOKEN = credentials('SONARQUBE_API_TOKEN')  // Use a secure Jenkins credential
    }

    stages {
        stage('Fetch Coverage Report') {
            steps {
                script {
                    def projects = params.PROJECTS.split(',').collect { it.trim() }
                    def csvReport = new StringBuilder()

                    projects.each { project ->
                        def coverageUrl = "${env.SONAR_URL}/api/measures/component_tree?component=${project}&metricKeys=coverage&qualifiers=DIR&strategy=children"

                        bat(script: """
                            curl -s -u "${env.API_TOKEN}:" "${coverageUrl}" -o coverage_${project}.json || exit 1
                        """)

                        if (fileExists("coverage_${project}.json")) {
                            def jsonResponse = readJSON file: "coverage_${project}.json"
                            def coverageData = [:]

                            if (jsonResponse?.component?.components) {
                                jsonResponse.components.each { dir ->
                                    def dirName = dir.path ?: dir.name ?: "Unknown"
                                    def coverage = dir.measures?.find { it.metric == 'coverage' }?.value ?: 'N/A'
                                    coverageData[dirName] = "${coverage}%"
                                }
                            } else {
                                echo "No coverage data found for project ${project}"
                            }

                            // Write project name
                            csvReport.append("${project}\n")

                            // Write directory names
                            def dirNames = coverageData.keySet().toList()
                            csvReport.append(dirNames.join(',') + "\n")

                            // Write coverage values
                            def coverageValues = dirNames.collect { coverageData[it] ?: 'N/A' }
                            csvReport.append(coverageValues.join(',') + "\n\n")
                        } else {
                            error "Failed to fetch coverage data for project ${project}"
                        }
                    }

                    writeFile file: 'SonarQube_Coverage_Report.csv', text: csvReport.toString()
                    archiveArtifacts artifacts: 'SonarQube_Coverage_Report.csv'
                }
            }
        }
    }
}
