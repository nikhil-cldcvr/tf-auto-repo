pipeline {
    agent {
        label 'win'
    }

    parameters {
        string(name: 'INPUTS', defaultValue: 'jenkins-project:main,first_prj:main', description: 'Comma-separated list of project inputs in the format PROJECT_KEYS:BRANCH')
    }

    environment {
        SONAR_URL = "http://35.244.34.170:9000" // Change to your SonarQube URL
        API_TOKEN = "squ_9aa34b2df5bb53ea7a6775655f430bf3c0810bb1" // Replace with your API token
    }

    stages {
        stage('Fetch SonarQube Metrics') {
            steps {
                script {
                    def csvReport = new StringBuilder()
                    csvReport.append("Overall Code Report,,,,,,,,,,,,,,,,,,,,,,,,,,\n")
                    csvReport.append(",Categories,,,Code Smells,,,,,,,,Vulnerabilities,,,,,,,,Bugs,,,,,,,\n")
                    csvReport.append(",Project Name,Branch,")

                    // Create headers for each category and severity
                    ['CODE_SMELL', 'VULNERABILITY', 'BUG'].each { category ->
                        ['major', 'critical', 'minor', 'blocker'].each { severity ->
                            csvReport.append("File Name,${severity.capitalize()},")
                        }
                    }
                    csvReport.append("\n")

                    def projectInputs = params.INPUTS.split(',')

                    projectInputs.each { input ->
                        def parts = input.split(':')
                        def projectKey = parts[0].trim()
                        def branch = parts[1].trim()

                        def page = 1
                        def totalIssues = 0
                        def isLastPage = false

                        // Pagination loop to handle up to 10,000 issues
                        def fileCounts = [:] // Initialize the map to store file counts by category and severity
                        while (!isLastPage) {
                            bat(script: """
                                curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/issues/search?componentKeys=${projectKey}&branch=${branch}&statuses=OPEN&ps=500&p=${page}" -o issues_${projectKey}_${page}.json
                            """)

                            // Read the JSON response as text
                            def jsonText = readFile(file: "issues_${projectKey}_${page}.json")
                            // Parse the JSON text
                            def issuesJson = new groovy.json.JsonSlurper().parseText(jsonText)

                            // Handle pagination
                            totalIssues += issuesJson.issues.size()
                            isLastPage = totalIssues >= 10000 || issuesJson.paging.total <= totalIssues
                            page++

                            // Count occurrences of each file across all categories and severities
                            issuesJson.issues.each { issue ->
                                def component = issue.component // File name
                                def category = issue.type // CODE_SMELL, VULNERABILITY, BUG
                                def severity = issue.severity.toLowerCase() // major, critical, minor, blocker
                                def key = "${category}_${severity}".toUpperCase()

                                // Initialize the file count map for this key
                                if (!fileCounts.containsKey(key)) {
                                    fileCounts[key] = [:]
                                }

                                // Count occurrences of each file for this category and severity
                                if (fileCounts[key].containsKey(component)) {
                                    fileCounts[key][component] += 1 // Increment count if file already exists
                                } else {
                                    fileCounts[key][component] = 1 // Initialize count if file is new
                                }
                            }
                        }

                        // Prepare a list to hold all files in a flat structure
                        def flatFileList = []

                        // Fill the flatFileList with files and counts
                        fileCounts.each { categorySeverity, files ->
                            files.each { file, count ->
                                flatFileList.add([categorySeverity: categorySeverity, file: file, count: count])
                            }
                        }

                        // Group files by project key and branch
                        // Build CSV rows
                        def filesMap = [:]
                        ['CODE_SMELL', 'VULNERABILITY', 'BUG'].each { category ->
                            ['major', 'critical', 'minor', 'blocker'].each { severity ->
                                def key = "${category}_${severity}".toUpperCase()
                                filesMap[key] = flatFileList.findAll { it.categorySeverity == key }
                            }
                        }

                        // Manually determine the maximum number of files per category/severity
                        int maxFiles = 0
                        filesMap.each { key, files ->
                            if (files.size() > maxFiles) {
                                maxFiles = files.size()
                            }
                        }

                        // Create data rows
                        for (int index = 0; index < maxFiles; index++) { // Loop through the maximum number of files
                            def row = new StringBuilder()
                            row.append(",${projectKey},${branch},")

                            ['CODE_SMELL', 'VULNERABILITY', 'BUG'].each { category ->
                                ['major', 'critical', 'minor', 'blocker'].each { severity ->
                                    def key = "${category}_${severity}".toUpperCase()
                                    def fileEntries = filesMap[key]
                                    if (fileEntries.size() > index) { // Ensure we have an entry at this index
                                        def fileEntry = fileEntries[index]
                                        def fileName = fileEntry.file

                                        // Append file name and file count
                                        row.append("${fileName},${fileEntry.count},")
                                    } else {
                                        row.append(",,") // Default for missing entries
                                    }
                                }
                            }

                            // Append the row to the CSV report
                            csvReport.append(row.toString().replaceAll(/,$/, "\n")) // Remove trailing comma
                        }
                        csvReport.append("\n")
                    }

                    // Write CSV report to a file
                    writeFile file: 'SonarQube_Metrics_Report.csv', text: csvReport.toString()
                    archiveArtifacts artifacts: 'SonarQube_Metrics_Report.csv'
                }
            }
        }
    }
}
