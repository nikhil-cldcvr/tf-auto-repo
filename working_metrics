//PROD request for releases with change in dates and a different date only for WACON

import groovy.json.JsonSlurper

pipeline {
    agent {
		node {
			label 'java'
		}
	}

    parameters {
        string(name: 'INPUTS', defaultValue: 'ACES-COBOL:dev1:dev1,ACES:dev1:int1-RLSE0010133,ADMINPORTAL:master:int1-RLSE0010133,CMS:master:master,COMMONSERVICES:master:master,ESERV:master:int1-RLSE0010133,WACON:master:int1-RLSE0010133', description: 'Comma-separated list of project inputs in the format PROJECT_KEYS:BRANCH:JENKINS_JOB_PATH')
        string(name: 'JENKINS_URL', defaultValue: 'https://jenkins.esa.dshs.wa.lcl', description: 'Jenkins server URL')
        string(name: 'CREDENTIALS_ID', defaultValue: 'chandp1', description: 'Jenkins credentials ID')
    }

  

    stages {
        stage('Fetch SonarQube Metrics') {
            steps {
                script {
                    def projectInputs = params.INPUTS.split(',')
                    
                    def csvReport = new StringBuilder()
                    csvReport.append("Overall Code Report,\n")
                    csvReport.append(",Categories,,Code Smells,,,,Vulnerabilities,,,,Bugs,,,,\n")
                    csvReport.append(",Project Name,Branch,Major,Critical,Minor,Blocker,Major,Critical,Minor,Blocker,Major,Critical,Minor,Blocker,Lines of Code,Violations,Blocker Violations,Number of Files,ComplexityNumber of Classes,\n")

                    def metricQuery = "ncloc,violations,blocker_violations,files,complexity,classes"
                    def issueTypes = ['major', 'critical', 'minor', 'blocker']
                    def issueCategories = ['CODE_SMELL', 'VULNERABILITY', 'BUG']

                    projectInputs.each { input ->
                        def parts = input.split(':')
                        def projectKey = parts[0].trim()

                        // Fetch various metrics
                        bat(script: """
                            curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/measures/component?component=${projectKey}&metricKeys=${metricQuery}" -o sonar_metrics_${projectKey}.json
                        """)
                        def metricsJson = readJSON file: "sonar_metrics_${projectKey}.json"

                        def metricsMap = [:] // Plain map
                        metricsJson.component.measures.each { measure ->
                            metricsMap[measure.metric] = measure.value
                        }

                        def issueCounts = [:] // Plain map
                        issueCategories.each { category ->
                            issueTypes.each { severity ->
                                def key = "${category}_${severity}"
                                issueCounts[key] = 0
                                bat(script: """
                                    curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/issues/search?componentKeys=${projectKey}&types=${category}&severities=${severity.toUpperCase()}&statuses=OPEN" -o issues_${projectKey}_${category}_${severity}.json
                                """)
                                def issuesJson = readJSON file: "issues_${projectKey}_${category}_${severity}.json"
                                issueCounts[key] = issuesJson.total ?: 0
                            }
                        }

                        // Append overall data to the CSV report
                        csvReport.append(",${projectKey},master,")
                        csvReport.append("${issueCounts['CODE_SMELL_major']},${issueCounts['CODE_SMELL_critical']},${issueCounts['CODE_SMELL_minor']},${issueCounts['CODE_SMELL_blocker']},")
                        csvReport.append("${issueCounts['VULNERABILITY_major']},${issueCounts['VULNERABILITY_critical']},${issueCounts['VULNERABILITY_minor']},${issueCounts['VULNERABILITY_blocker']},")
                        csvReport.append("${issueCounts['BUG_major']},${issueCounts['BUG_critical']},${issueCounts['BUG_minor']},${issueCounts['BUG_blocker']},")
                        csvReport.append("${metricsMap['ncloc'] ?: '0'},${metricsMap['violations'] ?: '0'},${metricsMap['blocker_violations'] ?: '0'},${metricsMap['files'] ?: '0'},${metricsMap['complexity'] ?: '0'},${metricsMap['classes'] ?: '0'},\n")
                    }

                    // Append new code report header after 4/29/2024
                    csvReport.append("\nNew Code Report Since\n")
					csvReport.append(",Categories,,Code Smells,,,,Vulnerabilities,,,,Bugs,,,,\n")
                    csvReport.append(",Project Name,Branch,Major,Critical,Minor,Blocker,Major,Critical,Minor,Blocker,Major,Critical,Minor,Blocker,\n")

                    projectInputs.each { input ->
                        def parts = input.split(':')
                        def projectKey = parts[0].trim()
                        def branch = parts[1].trim()

                        def issueCountsNew = [:] // Plain map
                        issueCategories.each { category ->
                            issueTypes.each { severity ->
                                def key = "${category}_${severity}"
                                issueCountsNew[key] = 0
                                bat(script: """
                                    curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/issues/search?componentKeys=${projectKey}&types=${category}&severities=${severity.toUpperCase()}&statuses=OPEN&createdAfter=2024-04-29&branch=${branch}" -o issues_${projectKey}_${category}_${severity}_new.json
                                """)
                                def issuesJsonNew = readJSON file: "issues_${projectKey}_${category}_${severity}_new.json"
                                issueCountsNew[key] = issuesJsonNew.total ?: 0
                            }
                        }

                        // Append new code metrics data to the CSV report
                        csvReport.append("4/29/2024,${projectKey},${branch},")
                        csvReport.append("${issueCountsNew['CODE_SMELL_major']},${issueCountsNew['CODE_SMELL_critical']},${issueCountsNew['CODE_SMELL_minor']},${issueCountsNew['CODE_SMELL_blocker']},")
                        csvReport.append("${issueCountsNew['VULNERABILITY_major']},${issueCountsNew['VULNERABILITY_critical']},${issueCountsNew['VULNERABILITY_minor']},${issueCountsNew['VULNERABILITY_blocker']},")
                        csvReport.append("${issueCountsNew['BUG_major']},${issueCountsNew['BUG_critical']},${issueCountsNew['BUG_minor']},${issueCountsNew['BUG_blocker']},\n")
                        //csvReport.append("${metricsMapNew['ncloc'] ?: '0'},${metricsMapNew['violations'] ?: '0'},${metricsMapNew['blocker_violations'] ?: '0'},${metricsMapNew['files'] ?: '0'},${metricsMapNew['complexity'] ?: '0'},${metricsMapNew['classes'] ?: '0'}\n")
                    }
					
					
					// Append new code report header for April Release
                    csvReport.append("\nApril Report Since\n")
					csvReport.append(",Categories,,Code Smells,,,,Vulnerabilities,,,,Bugs,,,,\n")
                    csvReport.append(",Project Name,Branch,Major,Critical,Minor,Blocker,Major,Critical,Minor,Blocker,Major,Critical,Minor,Blocker,\n")

                    projectInputs.each { input ->
                        def parts = input.split(':')
                        def projectKey = parts[0].trim()
						def branchApr = parts[2].trim()

                        def issueCountsApr = [:] // Plain map
                        issueCategories.each { category ->
                            issueTypes.each { severity ->
                                def key = "${category}_${severity}"
                                issueCountsApr[key] = 0
                                bat(script: """
                                    curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/issues/search?componentKeys=${projectKey}&types=${category}&severities=${severity.toUpperCase()}&statuses=OPEN&createdAfter=2024-11-25&branch=${branchApr}" -o issues_${projectKey}_${category}_${severity}_Apr.json
                                """)
                                def issuesJsonApr = readJSON file: "issues_${projectKey}_${category}_${severity}_Apr.json"
                                issueCountsApr[key] = issuesJsonApr.total ?: 0
                            }
                        }

                        // Append new code metrics data to the CSV report
                        csvReport.append("11/25/2024,${projectKey},${branchApr},")
                        csvReport.append("${issueCountsApr['CODE_SMELL_major']},${issueCountsApr['CODE_SMELL_critical']},${issueCountsApr['CODE_SMELL_minor']},${issueCountsApr['CODE_SMELL_blocker']},")
                        csvReport.append("${issueCountsApr['VULNERABILITY_major']},${issueCountsApr['VULNERABILITY_critical']},${issueCountsApr['VULNERABILITY_minor']},${issueCountsApr['VULNERABILITY_blocker']},")
                        csvReport.append("${issueCountsApr['BUG_major']},${issueCountsApr['BUG_critical']},${issueCountsApr['BUG_minor']},${issueCountsApr['BUG_blocker']},\n")
                    }

                    // Write CSV report to a file
                    writeFile file: 'SonarQube_Metrics_Report.csv', text: csvReport.toString()
                    archiveArtifacts artifacts: 'SonarQube_Metrics_Report.csv'
                }
            }
        }
    }
}
