pipeline {
    agent {
        label 'win'
    }

    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'The branch name to analyze')
        string(name: 'PROJECT_KEYS', defaultValue: 'jenkins-project', description: 'Comma-separated SonarQube project keys')
    }

    environment {
        SONAR_URL = "http://35.200.184.45:9000" // Change to your SonarQube URL
        API_TOKEN = "squ_6d1c8e1bc790e15e361209548d6d0de0ad2ca8a5"  // Replace with your API token
    }

    stages {
        stage('Fetch SonarQube Metrics') {
            steps {
                script {
                    def projectKeys = params.PROJECT_KEYS.split(',')
                    def csvReport = new StringBuilder()
                    csvReport.append("Project Name,Branch,Type,Code Smells - Major,Code Smells - Critical,Code Smells - Minor,Code Smells - Blocker,Vulnerabilities - Major,Vulnerabilities - Critical,Vulnerabilities - Minor,Vulnerabilities - Blocker,Bugs - Major,Bugs - Critical,Bugs - Minor,Bugs - Blocker,Lines of Code,Critical Violations,Blocker Violations,Number of Files,Complexity,Quality Gate Status,Number of Classes\n")

                    def overallMetricQuery = "ncloc,violations,blocker_violations,files,complexity,classes"
                    def newMetricQuery = "new_ncloc,new_violations,new_blocker_violations,new_files,new_complexity,new_classes"
                    def issueTypes = ['major', 'critical', 'minor', 'blocker']
                    def issueCategories = ['CODE_SMELL', 'VULNERABILITY', 'BUG']

                    projectKeys.each { projectKey ->
                        projectKey = projectKey.trim()

                        // Fetch project quality gate status
                        bat(script: """
                            curl -s -u ${env.API_TOKEN}: ${env.SONAR_URL}/api/qualitygates/project_status?projectKey=${projectKey} -o quality_gate_status_${projectKey}.json
                        """)

                        // Fetch overall metrics
                        bat(script: """
                            curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/measures/component?component=${projectKey}&metricKeys=${overallMetricQuery}" -o sonar_metrics_overall_${projectKey}.json
                        """)

                        // Fetch new code metrics
                        bat(script: """
                            curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/measures/component?component=${projectKey}&metricKeys=${newMetricQuery}" -o sonar_metrics_new_${projectKey}.json
                        """)

                        // Read and parse the JSON files
                        def qualityGateJson = readJSON file: "quality_gate_status_${projectKey}.json"
                        def overallMetricsJson = readJSON file: "sonar_metrics_overall_${projectKey}.json"
                        def newMetricsJson = readJSON file: "sonar_metrics_new_${projectKey}.json"

                        def qualityGate = qualityGateJson.projectStatus.status

                        // Extract metric values for overall and new code
                        def overallMetricsMap = overallMetricsJson.component.measures.collectEntries { [(it.metric): it.value] }
                        def newMetricsMap = newMetricsJson.component.measures.collectEntries { [(it.metric): it.value] }

                        // Initialize issue counts with explicit default values
                        def issueCounts = ['CODE_SMELL_major': 0, 'CODE_SMELL_critical': 0, 'CODE_SMELL_minor': 0, 'CODE_SMELL_blocker': 0,
                                           'VULNERABILITY_major': 0, 'VULNERABILITY_critical': 0, 'VULNERABILITY_minor': 0, 'VULNERABILITY_blocker': 0,
                                           'BUG_major': 0, 'BUG_critical': 0, 'BUG_minor': 0, 'BUG_blocker': 0]

                        // Fetch detailed issues count for each severity type and category
                        issueCategories.each { category ->
                            issueTypes.each { severity ->
                                bat(script: """
                                    curl -s -u ${env.API_TOKEN}: "${env.SONAR_URL}/api/issues/search?componentKeys=${projectKey}&types=${category}&severities=${severity.toUpperCase()}" -o issues_${projectKey}_${category}_${severity}.json
                                """)
                                def issuesJson = readJSON file: "issues_${projectKey}_${category}_${severity}.json"
                                issueCounts["${category}_${severity}"] = issuesJson.total ?: 0
                            }
                        }

                        // Append data to the CSV report for overall metrics
                        csvReport.append("${projectKey},${params.BRANCH},Overall,")
                        csvReport.append("${issueCounts['CODE_SMELL_major']},${issueCounts['CODE_SMELL_critical']},${issueCounts['CODE_SMELL_minor']},${issueCounts['CODE_SMELL_blocker']},")
                        csvReport.append("${issueCounts['VULNERABILITY_major']},${issueCounts['VULNERABILITY_critical']},${issueCounts['VULNERABILITY_minor']},${issueCounts['VULNERABILITY_blocker']},")
                        csvReport.append("${issueCounts['BUG_major']},${issueCounts['BUG_critical']},${issueCounts['BUG_minor']},${issueCounts['BUG_blocker']},")
                        csvReport.append("${overallMetricsMap['ncloc'] ?: '0'},${overallMetricsMap['violations'] ?: '0'},${overallMetricsMap['blocker_violations'] ?: '0'},${overallMetricsMap['files'] ?: '0'},${overallMetricsMap['complexity'] ?: '0'},${qualityGate ?: 'N/A'},${overallMetricsMap['classes'] ?: '0'}\n")

                        // Append data to the CSV report for new metrics
                        csvReport.append("${projectKey},${params.BRANCH},New,")
                        csvReport.append("${issueCounts['CODE_SMELL_major']},${issueCounts['CODE_SMELL_critical']},${issueCounts['CODE_SMELL_minor']},${issueCounts['CODE_SMELL_blocker']},")
                        csvReport.append("${issueCounts['VULNERABILITY_major']},${issueCounts['VULNERABILITY_critical']},${issueCounts['VULNERABILITY_minor']},${issueCounts['VULNERABILITY_blocker']},")
                        csvReport.append("${issueCounts['BUG_major']},${issueCounts['BUG_critical']},${issueCounts['BUG_minor']},${issueCounts['BUG_blocker']},")
                        csvReport.append("${newMetricsMap['new_ncloc'] ?: '0'},${newMetricsMap['new_violations'] ?: '0'},${newMetricsMap['new_blocker_violations'] ?: '0'},${newMetricsMap['new_files'] ?: '0'},${newMetricsMap['new_complexity'] ?: '0'},${qualityGate ?: 'N/A'},${newMetricsMap['new_classes'] ?: '0'}\n")
                    }

                    // Save and archive the CSV report
                    writeFile file: 'sonar_detailed_metrics_report.csv', text: csvReport.toString()
                    archiveArtifacts artifacts: 'sonar_detailed_metrics_report.csv'
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            deleteDir()
        }
    }
}
